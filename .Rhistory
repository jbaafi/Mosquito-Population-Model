## return result as a list!
list(dxdt)
}
params <- c(beta=1.096,gamma=0.0769)
times <- seq(from=0,to=365,by=0.01) # returns a sequence
xstart <- c(S=0.999,I=0.001,R=0.000)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
1/365
times <- seq(from=0,to=10,by=0.01) # returns a sequence
xstart <- c(S=0.999,I=0.001,R=0.000)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
times <- seq(from=0,to=50,by=0.01) # returns a sequence
xstart <- c(S=0.999,I=0.001,R=0.000)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
lines(S~time, col = "blue")
lines(S~time, data=out, col = "blue")
plot(I ~ time,data=out,type='l')
lines(S~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1))
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(5, 10, 4, 1), cex.axis = 3, cex.lab = 3)
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
dev.off()
plot(I ~ time,data=out,type='l')
#define plot area as three rows and one column
par(mfrow = c(2, 1), cex.axis = 3, cex.lab = 3)
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
dev.off()
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(0.5, 4, 4, 20))
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(2, 4, 4, 10))
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(2, 4, 4, 5))
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 4, 4, 3))
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
times <- seq(from=0,to=60/365,by=1/365/4) # per year
xstart <- c(S=0.999,I=0.001,R=0.000)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
lines(S~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 4, 4, 3))
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
params <- c(beta=400,gamma=365/13) # per year
times <- seq(from=0,to=50,by=0.01) # returns a sequence
xstart <- c(S=0.999,I=0.001,R=0.000)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
lines(S~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 4, 4, 3))
#create plots
plot(I~time, data = out, pch=19, col='red', type = "l")
plot(S~time, data = out, pch=19, col='blue', type = "l")
times <- seq(from=0,to=10,by=0.01) # returns a sequence
xstart <- c(S=0.999,I=0.001,R=0.000)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
params <- c(beta=400,gamma=365/13) # per year
times <- seq(from=0,to=1,by=0.01) # returns a sequence
xstart <- c(S=0.999,I=0.001,R=0.000)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
# -------------------------------------------------------------
closed.sir.model <- function (t, x, params) {
## first extract the state variables
E <- x[1]
A <- x[2]
## now extract the parameters
beta <- params["beta"]
gamma <- params["gamma"]
## now code the model equations
dEdt <- beta*A-gamma*E
dAdt <- gamma*E
## combine results into a single vector
dxdt <- c(dEdt,dAdt)
## return result as a list!
list(dxdt)
}
params <- c(beta=50,gamma=0.5) # per year
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=1,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(I ~ time,data=out,type='l')
lines(S~time, data=out, col = "blue")
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=50,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 4, 4, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=30,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
summary(out)
View(out)
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=10,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=2,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=1,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
params <- c(beta=10,gamma=0.5) # per year
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=1,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
dev.off()
params <- c(beta=10,gamma=0.5) # per year
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=1,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=10,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
params <- c(beta=1,gamma=0.05) # per year
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=10,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
#times <- seq(from=0,to=60/365,by=1/365/4) # per year
times <- seq(from=0,to=50,by=0.01) # returns a sequence
xstart <- c(E=0.00,A=100)
out <- as.data.frame(
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=params
)
)
plot(E ~ time,data=out,type='l')
lines(A~time, data=out, col = "blue")
#define plot area as three rows and one column
par(mfrow = c(2, 1), mar = c(3, 2, 1, 3))
#create plots
plot(E~time, data = out, pch=19, col='red', type = "l")
plot(A~time, data = out, pch=19, col='blue', type = "l")
# Clear workspace
rm(list = ls())
source("~/Desktop/R codes/blowflies.R", echo=TRUE)
source("~/Desktop/R codes/blowflies.R", echo=TRUE)
head(yout)
plot(yout$time, yout$y1, type = "l", xlab = "Time", ylab = "Population",
main = "Adult Blowfly Population")
plot(yout$time, yout$dy, type = "l")
plot(yout$time, yout$exp, type = "l")
TA <- read.csv("aphid.data.csv")
source("~/Desktop/R codes/Abdelrazec_model.R", echo=TRUE)
source("~/Desktop/R codes/Exponential_growth_model.R", echo=TRUE)
source("~/Desktop/R codes/Exponential_growth_model.R", echo=TRUE)
source("~/Desktop/R codes/quantitative_training.R", echo=TRUE)
source("~/Desktop/R codes/quantitative_training.R", echo=TRUE)
zeroes
zeroes(4, 1)
zeros(4, 1)
zero_range(4, 1)
# Clear workspace
rm(list = ls())
dev.off()
df <- data.frame(x = c(0, 200,100),
y = c(7500000,10000000,2000000)) %>%
mutate(y_millions = y/1e6)
View(df)
ggplot(df,
aes(x = x,
y = y_millions)) +
geom_point() +
labs(y = "y (in millions)")
ggplot(df,
aes(x = x,
y = y_millions)) +
geom_line() +
labs(y = "y (in millions)")
# Clear workspace
rm(list = ls())
dev.off()
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
time <-  seq(0, TT, dtime)
# Model Parameters ---------------------------------------------------------------------------------------------------------
# Time
N <- 5
TT <- 365
dtime = 0.5 # time steps
time <-  seq(0, TT, dtime)
time
time0 <-time[1]
time0
# Building the stochastic temperature and deterministic temperature
a <- mean(profile.df$TEMP)
b1 <- 3.32
b2 <- 4.61
theta=rnorm(length(time), 4, 1)
theta
length(theta)
length(time)
Temp = function(t){
Temp = a + b1*sin(2 * pi * t/365) + b2*cos(2 * pi * t/365) + theta
return(Temp)
}
det.Temp = function(t){
Temp = a + b1*sin(2 * pi * t/365) + b2*cos(2 * pi * t/365)
return(Temp)
}
# Life stage initial conditions
P0 <- 1
C0 <- 1
A0 <- 1
I0 <- 1
P = P0
C = C0
A = A0
I = I0
# Paramater conditions
iota1 <- 1
iota <- iota1 # Attachment rate of lice
f <- 500000 # Number of fish within each pen
# Setting data frame that will be used in the loop.
simulation.data.frame=NULL
# Setting data frame that will be used in the loop.
simulation.data.frame=NULL
sd in seq(1, 5, 0.5)
seq(1, 5, 0.5)
x <- seq(1, 5, 0.5)
length(x)
source("~/Documents/climate-and-mosquitoes/stochastic_compart_model/model1_consparams.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/stochastic_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/stochastic_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/basic_start_model.R", echo=TRUE)
source("~/Desktop/Mosquito population dynamics/stage-structured-model.R", echo=TRUE)
#Clear workspace
rm(list = ls())
# Function to return rate of change of the states in the ODE model
model <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dE<- phi*(1-(A/K))*A - (deltaE+muE+pieE)*E
dL<- deltaE*E - (deltaL+muL+pieL + sigmaL*L)*L
dP <- deltaL*L - (deltaP+muP+pieP)*P
dA <- chi*deltaP*P - (muA+pieA)*A
list(c(dE, dL, dP, dA))
})
}
# Set of parameter values used in the model
parameters <- c(
phi = 10.7,
K = 10^6,
deltaE = 0.55,
deltaL = 0.20,
deltaP = 0.3,
muE =  0.3,#0.0143 # value taken from Hamdan & Kilicman, 2020
muL = 0.30, #0.0143 # value taken from Hamdan & Kilicman, 2020
muP = 0.15, #0.0143 # value taken from Hamdan & Kilicman, 2020
muA = 0.10,   # value taken from Hamdan & Kilicman, 2020
pieE = 0.011,
pieL = 0.10,
pieP =  0.01,
pieA = 0.07,
sigmaL = 0.004,
chi = 0.7     # value taken from Hamdan & Kilicman, 2020
)
# Initial conditions
state <- c(
E = 100,
L = 0,
P = 0,
A = 0)
# Time steps in running the model
times <- seq(0, 500, by = 0.01)
# solving the system with ode function from the deSolve package
out <- ode(y = state, times = times, func = model, parms = parameters)
# Converting the numerical solution to a Dataframe
out <- data.frame(out)
head(out)
#plotting the numrical results
plot(out$time, out$A, type = "l", col = "blue", ylim = c(0, 10^3), xlab = "Time (in days)", ylab = "Population")
lines(out$time, out$E, col = "green")
lines(out$time, out$L, col = "yellow")
lines(out$time, out$P, col = "red")
legend( "topright", c("A(t)", "E(t)", "L(t)", "P(t)"),
text.col=c("blue", "green", "yellow","red") )
# A few math expressions to produce a good plot
out$Egg <- out$E/10^3
out$Larvae <- out$L/10^3
out$Pupae <- out$P/10^3
out$Adult <- out$A/10^3
plot(out$time, out$Egg, type = "l", col = "green", ylab = "Density (in thousands)")
lines(out$time, out$Larvae, col = "red")
lines(out$time, out$Pupae, col = "blue")
lines(out$time, out$Adult, col = "yellow")
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
