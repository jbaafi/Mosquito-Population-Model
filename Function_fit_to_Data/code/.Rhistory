theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
theme(axis.text.x=element_text(angle=60, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_classic()+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
#theme_light()+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Prep))+
geom_line()+
theme_light()+
theme(axis.text.x=element_text(angle=45, hjust=1))
head(climate.df)
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Precip))+
geom_line()+
theme_light()+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Precip))+
geom_line()+
theme_light()+
ylab("Total Precipitation") +
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Precip))+
geom_line()+
theme_light()+
ylab("Total Precipitation") +
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Precip))+
geom_line()+
theme_light()+
xlab("Time (Days)")+
ylab("Total Precipitation") +
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "steelblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "blue")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "lightblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "steelblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "orangeblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "lightgreen")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line()+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "steelblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Precip))+
geom_line(colour = "steelblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Total Precipitation") +
theme(axis.text.x=element_text(angle=45, hjust=1))
head(climate.df)
# Fitting function to data
Time <- climate.df$Days.Since.Origin
Temp <- climate.df$Mean.Temp
# Fitting function to data of mean temperature
Time <- climate.df$Days.Since.Origin
Temp <- climate.df$Mean.Temp
#function to fit
func <- sin(2*pi*Time/366) + cos(2*pi*Time/366)
fit.lm <- lm(Temp~func)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
plot(Temp ~ Days_Since_Origin, data= climate.df)
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
source('~/Desktop/jake/second_chapter/code/temperature_fitting_code.R', echo=TRUE)
setwd("/Users/jbaafi/Desktop/jake/second_chapter/code")
# Packages needed
packs.needed <-c("tidyverse", "stringr", "dplyr", "base",
"ggplot2", "patchwork", "bbmle", "chron")
lapply(packs.needed, require, character.only = TRUE)
# Loading Bay D'Esspoir and data
baydespoir_prof <- read.csv("../../../winter_2020/model_code/data_files/baydespoir/baydespoir_cruise.csv")
load("../../../winter_2020/model_code/data_files/amy_regional/ParamsFuncs.RData")
load("../../../winter_2020/model_code/data_files/amy_regional/farmNL.RData")
# Files to import; The surf data really doesn't contain any good information
profile.09.10 <- read.csv("a_MEDS_profile_prof_09_10.csv", header = T)
profile.11.12 <- read.csv("a_MEDS_profile_prof_11_12.csv", header = T)
# Filter the data
profile.09.10.f <- profile.09.10 %>%
select(DATA_TYPE:Q_POS, TEMP)
profile.11.12.f <- profile.11.12 %>%
select(DATA_TYPE:Q_POS, TEMP)
profile.df <- rbind(profile.09.10.f, profile.11.12.f) # combine date
monthly.dates <- dates(paste(profile.df$OBS_MONTH, profile.df$OBS_DAY,
profile.df$OBS_YEAR, sep="/")) # formatting time data
profile.df$chron_date <-chron(dates=monthly.dates,
origin. = c(month = 7,day = 1,
year = 2009)) # setting into chron
profile.df <- arrange(profile.df, chron_date) # ordering dates
o <- as.Date("2009-07-01") # The origin or first date
profile.df$days_since_origin <- (as.numeric(as.Date(profile.df$chron_date) - o)) # Producing a seqfrom smallest to largest
# Formating the data (only want data that has recorded temperature)
profile.df <- filter(profile.df, !is.na(TEMP))
# Showing the change in temeperature and time
ggplot(profile.df, aes(x=chron_date, y=TEMP)) +
geom_line(color="steelblue") +
xlab("") +
theme_classic() +
theme(axis.text.x=element_text(angle=60, hjust=1)) #+
# Method 1 to fit the data (found online)
Time <- profile.df$days_since_origin
temperature <- profile.df$TEMP
xc<-cos(2*pi*Time/366) # becomes b2
xs<-sin(2*pi*Time/366) # becomes b1
fit.lm <- lm(temperature~xc+xs)
# access the fitted series (for plotting)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
plot(TEMP ~ days_since_origin, data= profile.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
source('~/Documents/Data/code/temp_precip_analysis_code.R', echo=TRUE)
# Temperature stochastic prediction code
rm(list=ls())
setwd("/Users/jbaafi/Desktop/jake/second_chapter/code")
# Packages needed
packs.needed <-c("tidyverse", "stringr", "dplyr", "base",
"ggplot2", "patchwork", "bbmle", "chron")
lapply(packs.needed, require, character.only = TRUE)
# Loading Bay D'Esspoir and data
baydespoir_prof <- read.csv("../../../winter_2020/model_code/data_files/baydespoir/baydespoir_cruise.csv")
load("../../../winter_2020/model_code/data_files/amy_regional/ParamsFuncs.RData")
load("../../../winter_2020/model_code/data_files/amy_regional/farmNL.RData")
# Files to import; The surf data really doesn't contain any good information
profile.09.10 <- read.csv("a_MEDS_profile_prof_09_10.csv", header = T)
profile.11.12 <- read.csv("a_MEDS_profile_prof_11_12.csv", header = T)
# Filter the data
profile.09.10.f <- profile.09.10 %>%
select(DATA_TYPE:Q_POS, TEMP)
profile.11.12.f <- profile.11.12 %>%
select(DATA_TYPE:Q_POS, TEMP)
profile.df <- rbind(profile.09.10.f, profile.11.12.f) # combine date
monthly.dates <- dates(paste(profile.df$OBS_MONTH, profile.df$OBS_DAY,
profile.df$OBS_YEAR, sep="/")) # formatting time data
profile.df$chron_date <-chron(dates=monthly.dates,
origin. = c(month = 7,day = 1,
year = 2009)) # setting into chron
profile.df <- arrange(profile.df, chron_date) # ordering dates
o <- as.Date("2009-07-01") # The origin or first date
profile.df$days_since_origin <- (as.numeric(as.Date(profile.df$chron_date) - o)) # Producing a seqfrom smallest to largest
# Formating the data (only want data that has recorded temperature)
profile.df <- filter(profile.df, !is.na(TEMP))
# Showing the change in temeperature and time
ggplot(profile.df, aes(x=chron_date, y=TEMP)) +
geom_line(color="steelblue") +
xlab("") +
theme_classic() +
theme(axis.text.x=element_text(angle=60, hjust=1)) #+
# Method 1 to fit the data (found online)
Time <- profile.df$days_since_origin
temperature <- profile.df$TEMP
xc<-cos(2*pi*Time/366) # becomes b2
xs<-sin(2*pi*Time/366) # becomes b1
fit.lm <- lm(temperature~xc+xs)
# access the fitted series (for plotting)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
plot(TEMP ~ days_since_origin, data= profile.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
# To analyse climate data and fit functions to temperature and precipitation data
#Clear workspace
rm(list = ls())
#set working directory
setwd("/Users/jbaafi/Documents/Data/code")
# Import packages into r
library(tidyverse)
library(dplyr)
library(chron)
#load data for handy work before the actual work. We going to manipulate this data
# with the dplyr functions 1. filter() 2. Arrange() 3. select() 4. mutate() 5. summarise
# and 6. group_by().  These six functions provide the verbs for a language of data
# manipulation.
library(nycflights13)
# To filter for the dec 25
dec25 <- filter(flights, month == 12, day == 25)
#Import 2011-2016 climate data into r
climate_11 <- read.csv("/Users/jbaafi/Documents/Data/en_climate_daily_ON_6153301_2011_P1D.csv", header = TRUE)
climate_12 <- read.csv("/Users/jbaafi/Documents/Data/en_climate_daily_ON_6153301_2012_P1D.csv", header = TRUE)
climate_13 <- read.csv("/Users/jbaafi/Documents/Data/en_climate_daily_ON_6153301_2013_P1D.csv", header = TRUE)
climate_14 <- read.csv("/Users/jbaafi/Documents/Data/en_climate_daily_ON_6153301_2014_P1D.csv", header = TRUE)
climate_15 <- read.csv("/Users/jbaafi/Documents/Data/en_climate_daily_ON_6153301_2015_P1D.csv", header = TRUE)
climate_16 <- read.csv("/Users/jbaafi/Documents/Data/en_climate_daily_ON_6153301_2016_P1D.csv", header = TRUE)
# To subset the data for the needed columns
climate_df_11 <- climate_11 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_12 <- climate_12 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_13 <- climate_13 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_14 <- climate_14 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_15 <- climate_15 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_16 <- climate_16 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
# Combine the above data-frames into one data-frame.
climate_df <- rbind(climate_df_11, climate_df_12, climate_df_13, climate_df_14,
climate_df_15, climate_df_16)
# Rename some of the columns of the climate_df data to make it simple
climate.df <- climate_df %>%
rename(Mean.Temp = Mean.Temp...C.,
Total.Precip = Total.Precip..mm.
)
# Formatting time data in a form that chron can understand
daily_dates <- dates(paste(climate.df$Month,
climate.df$Day,
climate.df$Year, sep="/"))
climate.df$Chron.Date <-chron(dates=daily_dates,
origin. = c(month = 1,day = 1,
year = 2011)) # setting date into chron
climate.df <- arrange(climate.df, Chron.Date) # ordering dates and adding it to data-frame
start.date <- as.Date("2011-01-01") # The starting date
climate.df$Days.Since.Origin <- (as.numeric(as.Date(climate.df$Chron.Date) - start.date)) # Producing a sequence from smallest to largest
# counting NANs column-wise
sapply(climate.df, function(x) sum(is.na(x)))
# Formating data to exclude the NANs
climate.df<- filter(climate.df, !is.na(Mean.Temp), !is.na(Total.Precip))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "steelblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Precip))+
geom_line(colour = "steelblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Total Precipitation") +
theme(axis.text.x=element_text(angle=45, hjust=1))
# Fitting function to data of mean temperature
Time <- climate.df$Days.Since.Origin
Temp <- climate.df$Mean.Temp
xs <- sin(2*pi*Time/366)
xc <- cos(2*pi*Time/366)
fit.lm <- lm(Temp~xs+xc)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
source('~/Documents/Data/code/temp_precip_analysis_code.R', echo=TRUE)
source('~/Documents/Data/code/temp_precip_analysis_code.R', echo=TRUE)
source('~/Documents/Data/code/temp_precip_analysis_code.R', echo=TRUE)
source('~/Documents/Data/code/temp_precip_analysis_code.R', echo=TRUE)
source('~/Documents/Data/code/temp_precip_analysis_code.R', echo=TRUE)
source('~/Documents/Data/code/temp_precip_analysis_code.R', echo=TRUE)
ggplot(data = climate.df, mapping = aes(x=Days.Since.Origin, y=Temp))+
geom_point()+
geom_abline(fit, colour="red")+
geom_abline(pred, colour="blue")
ggplot(data = climate.df, mapping = aes(x=Days.Since.Origin, y=Temp))+
geom_point()+
geom_abline(fit, colour="red")+
geom_abline(pred, colour="blue")
`rlang::last_error()`
ggplot(data = climate.df, mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_point()+
geom_abline(fit, colour="red")+
geom_abline(pred, colour="blue")
ggplot(data = climate.df, mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_point()+
geom_line(fit, colour="red")+
geom_line(pred, colour="blue")
ggplot(data = climate.df, mapping = aes(x=Days.Since.Origin))+
geom_point(y=Mean.Temp)+
geom_line(fit, colour="red")+
geom_line(pred, colour="blue")
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_abline(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_abline(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
lines(Time, pred, col="blue")
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp, colour = "steelblue"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp, colour = "steelblue"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="yellow"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp, colour = ""))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
geom_line(mapping = aes(x=Days.Since.Origin, y=fit)+
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit))+
geom_line(mapping = aes(x=Days.Since.Origin, y=pred, colour="blue"))
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Time, y=pred, colour="blue"))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
lines(pred, col="blue")
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(pred, col="blue")
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
fit.lm <- lm(Temp~sin(2*pi*Time/366 + cos(2*pi*Time/366)))
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
xs <- sin(2*pi*Time/366)
xc <- cos(2*pi*Time/366)
fit.lm <- lm(Temp~xs+xc)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
fsin <- sin(2*pi*Time/366)
fcos <- cos(2*pi*Time/366)
fit.lm <- lm(Temp~fsin+fcos)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
#Define a periodic function to fit to data
func <- sin(2*pi*Time/366) + cos(2*pi*Time/366)
fit.lm <- lm(Temp~func)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
#Define a periodic function to fit to data
func <- sin(2*pi*Time/365) + cos(2*pi*Time/365)
fit.lm <- lm(Temp~func)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
#Define a periodic function to fit to data
func <- sin(2*pi*Time/366) + cos(2*pi*Time/366)
fit.lm <- lm(Temp~func)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Time, y=pred, colour="blue"))
