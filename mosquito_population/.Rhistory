b2.temp <- b1.temp
t <-  seq(0, 365)
# Defining temperature function
temp <- function(t){
temp = a.temp + b1.temp*sin(2 * pi * t/365) + b2.temp*cos(2 * pi * t/365)
return(temp)
}
data.temp <- data.frame(t, temp(t))
#Plot of temperature as a function of time (365 days)
ggplot(data = data.temp, mapping = aes(x=t, y=temp(t)))+
geom_line()
source('~/Documents/Research@MUN/model parameterization data/adult_death_function.R', echo=TRUE)
###############################################################################
#Model parameters
a.temp <- 8.9231
b1.temp <- -8.7635
b2.temp <- b1.temp
t <-  seq(0, 365)
# Defining temperature function
temp <- function(t){
temp = a.temp + b1.temp*sin(2 * pi * t/365) + b2.temp*cos(2 * pi * t/365)
return(temp)
}
data.temp <- data.frame(t, temp(t))
#Plot of temperature as a function of time (365 days)
ggplot(data = data.temp, mapping = aes(x=t, y=temp(t)))+
geom_line()
adult.mort <- function(t){
adult.mort = c_A*exp(((temp(t)-T_A)/d_A)^4)
return(adult.mort)
}
adult.mort(t)
summary(m2)
plot(x, y)
lines(x, predict(m))
lines(x, predict(m2), col = "red")
summary(m)
summary(m2)
c_A <- 0.08841
T_A <- 21.24746
d_A <- 14.92552
adult.mort <- function(t){
adult.mort = c_A*exp(((temp(t)-T_A)/d_A)^4)
return(adult.mort)
}
adult.mort(t)
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mort
plot(data.adult.mort$t, data.adult.mort$adult.mort.t.)
temp(4)
c_A*exp(((temp(t)-T_A)/d_A)^4)
c_A*exp(((3-T_A)/d_A)^4)
summary(predict(m2))
temp = a.temp + b1.temp*sin(2 * pi * t/365) + b2.temp*cos(2 * pi * t/365)
return(temp)
# Defining temperature function
temp <- function(t){
temp = a.temp + b1.temp*sin(2 * pi * t/365) + b2.temp*cos(2 * pi * t/365)
return(temp)
}
data.temp <- data.frame(t, temp(t))
#Plot of temperature as a function of time (365 days)
ggplot(data = data.temp, mapping = aes(x=t, y=temp(t)))+
geom_line()
#Plot of temperature as a function of time (365 days)
ggplot(data = data.temp, mapping = aes(x=t, y=temp(t)))+
geom_line()
c_A <- 0.08841
T_A <- 21.24746
d_A <- 14.92552
# Using the if... else... statement to take care of very small temperature values
data.adult.mortality <- function(t){
if(temp(t)<=5){
adult.mortality <-  0.08842
}
else{adult.mortality <-  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(adult.mortality)
}
data.adult.mort <- data.frame(t, temp(t), data.adult.mortality(t))
data.adult.mortality()
data.adult.mortality(t)
data.adult.mort <- data.frame(t, temp(t), data.adult.mortality(t))
data.adult.mort
View(adult.mort)
View(data.adult.mortality)
View(adult.mortality.df)
adult.mort <- function(t){
adult.mort = c_A*exp(((temp(t)-T_A)/d_A)^4)
return(adult.mort)
}
# Using the if... else... statement to take care of very small temperature values
data.adult.mortality <- function(t){
if(temp(t)<=5){
adult.mortality <-  0.08842
}
else{adult.mortality <-  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(adult.mortality)
}
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mortality <- data.frame(t, temp(t), data.adult.mortality(t))
data.adult.mort
View(data.adult.mort)
View(data.adult.mortality)
View(data.adult.mort)
summary(adult.mort())
summary(data.adult.mort)
summary(data.adult.mortality)
# Using the if... else... statement to take care of very small temperature values
data.adult.mortality <- function(t){
if(temp(t)<=5){
adult.mortality =  0.08842
}
else{adult.mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(adult.mortality)
}
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mortality <- data.frame(t, temp(t), data.adult.mortality(t))
summary(data.adult.mortality)
if(temp(t)<5){
adult.mortality =  0.08842
}
# Using the if... else... statement to take care of very small temperature values
data.adult.mortality <- function(t){
if(temp(t)<5){
adult.mortality =  0.08842
}
else{adult.mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(adult.mortality)
}
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mortality <- data.frame(t, temp(t), data.adult.mortality(t))
summary(data.adult.mortality)
data.adult.mortality <- data.frame(t, temp(t), data.adult.mortality(t))
plot(data.adult.mortality$t, data.adult.mortality$data.adult.mortality.t.)
# Using the if... else... statement to take care of very small temperature values
adult.mortality <- function(t){
if(temp(t)<5){
adult.mortality =  0.08842
}
else{adult.mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(adult.mortality)
}
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mortality <- data.frame(t, temp(t), data.adult.mortality(t))
data.adult.mortality <- data.frame(t, temp(t), adult.mortality(t))
# Using the if... else... statement to take care of very small temperature values
adult.mortality <- function(t){
if(temp(t)<5){
mortality =  0.08842
}
else{mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(mortality)
}
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mortality <- data.frame(t, temp(t), adult.mortality(t))
plot(data.adult.mortality$t, data.adult.mortality$data.adult.mortality.t.)
data.adult.mortality
plot(data.adult.mortality$t, data.adult.mortality$adult.mortality.t.)
summary(data.adult.mortality)
if(temp(t)<=5){
mortality =  0.08842
}
for (i in temp(t)) {
if(temp(t)<=5){
mort = 0.08
}
else{mort = c_A*exp(((temp(t)-T_A)/d_A)^4)
}
}
try <- function(t){
for (i in temp(t)) {
if(temp(t)<=5){
mort = 0.08
}
else{mort = c_A*exp(((temp(t)-T_A)/d_A)^4)
}
}
}
try(t)
try(t)
data.temp
# Using the if... else... statement to take care of very small temperature values
adult.mortality <- function(t){
if(data.temp$temp.t.<=5){
mortality =  0.08842
}
else{mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(mortality)
}
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mortality <- data.frame(t, temp(t), adult.mortality(t))
plot(data.adult.mortality$t, data.adult.mortality$adult.mortality.t.)
summary(data.adult.mortality)
if(temp(t)<=5){
mortality =  0.08842
}
f <- function(t){
ifelse(temp(t) <= 5, 0.088, c_A*exp(((temp(t)-T_A)/d_A)^4))
}
f
f(t)
summary(f)
describe
f <- function(t){
ifelse(temp(t) <= 5, 0.088, c_A*exp(((temp(t)-T_A)/d_A)^4))
}
data.f <- data.frame(t, temp(t), f(t))
plot(data.f$t, data.f$f.t.)
plot(data.f$t, data.f$f.t., type = "l")
# Using the if... else... statement to take care of very small temperature values
adult.mortality <- function(t){
if(temp(t)<=5){
mortality =  0.08842
}
else{mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(mortality)
}
plot(data.adult.mortality$t, data.adult.mortality$adult.mortality.t.)
plot(data.adult.mortality$t, data.adult.mortality$adult.mortality.t., type = "l")
plot(data.adult.mortality$t, data.adult.mortality$adult.mortality.t., type = "l")
plot(data.f$t, data.f$f.t., type = "l")
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
# Using the if... else... statement to take care of very small temperature values
adult.mortality <- function(t){
if(temp(t)<=5){
mortality =  0.08842
}
else{mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(mortality)
}
data.adult.mortality <- data.frame(t, temp(t), adult.mortality(t))
adult.mort <- function(t){
adult.mort = c_A*exp(((temp(t)-T_A)/d_A)^4)
return(adult.mort)
}
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
plot(data.adult.mort$t, data.adult.mort$adult.mort.t.)
plot(x, y)
source('~/Documents/Research@MUN/model parameterization data/adult_death_function.R', echo=TRUE)
plot(x, y)
lines(x, predict(m))
m2 <- nls(y ~ c_A*exp(((x-T_A)/d_A)^4), data = adult.df.total,
start = list(c_A = 0.0886, T_A = 21, d_A = 14.852))
lines(x, predict(m2), col = "red")
summary(m2)
# Using the if... else... statement to take care of very small temperature values
adult.mortality <- function(t){
if(temp(t)<=5){
mortality =  0.08842
}
else{mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(mortality)
}
data.adult.mortality <- data.frame(t, temp(t), adult.mortality(t))
c_A <- 0.08841
T_A <- 21.24746
d_A <- 14.92552
adult.mort <- function(t){
adult.mort = c_A*exp(((temp(t)-T_A)/d_A)^4)
return(adult.mort)
}
# Using the if... else... statement to take care of very small temperature values
adult.mortality <- function(t){
if(temp(t)<=5){
mortality =  0.08842
}
else{mortality =  c_A*exp(((temp(t)-T_A)/d_A)^4)
}
return(mortality)
}
data.adult.mortality <- data.frame(t, temp(t), adult.mortality(t))
plot(data.adult.mortality$t, data.adult.mortality$adult.mortality.t., type = "l")
f <- function(t){
ifelse(temp(t) <= 5, 0.088, c_A*exp(((temp(t)-T_A)/d_A)^4))
}
data.f <- data.frame(t, temp(t), f(t))
plot(data.f$t, data.f$f.t., type = "l")
temp(t=seq(110, 140))
temp(t=seq(300, 350))
temp(t=seq(200, 300))
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
$45,383/12
45,383/12
45383/12
50000/12
func = ifelse(temp(t) <= 5, 0.088, c_A*exp(((temp(t)-T_A)/d_A)^4))
#look at this
f <- function(t){
func = ifelse(temp(t) <= 5, 0.088, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
}
data.f <- data.frame(t, temp(t), f(t))
data.adult.mort <- data.frame(t, temp(t), adult.mort(t))
data.adult.mortality <- data.frame(t, temp(t), adult.mortality(t))
plot(data.f$t, data.f$f.t., type = "l")
adult.mortality <- function(t){
ad.mort = ifelse(temp(t) <= 5, 0.088, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(ad.mort)
}
df8 <- data.frame(t, adult.mortality(t) #adult.mortality = p(adult.mortality(t))
)
df8
#plot of adult mortality as a function of temperature as a function of time
ggplot(df8, aes(x=t, y=adult.mortality(t)))+
geom_line()
source('~/Documents/Research@MUN/model parameterization data/adult_death_function.R', echo=TRUE)
source('~/Documents/Research@MUN/model parameterization data/adult_death_function.R', echo=TRUE)
m2 <- nls(y ~ c_A*exp(((x-T_A)/d_A)^4), data = adult.df.total,
start = list(c_A = 0.0886, T_A = 21, d_A = 14.852))
plot(x, y)
lines(x, predict(m))
lines(x, predict(m2), col = "red")
summary(m)
summary(m2)
#look at this
f <- function(t){
func = ifelse(temp(t) <= 5, 0.088, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
}
data.f <- data.frame(t, temp(t), f(t))
plot(data.f$t, data.f$f.t., type = "l")
summary(data.f)
plot(data.f$t, data.f$f.t., type = "l")
m2 <- nls(y ~ c_A*exp(((x-T_A)/d_A)^4), data = adult.df.total,
start = list(c_A = 0.0886, T_A = 21, d_A = 14.852))
plot(x, y)
lines(x, predict(m))
lines(x, predict(m2), col = "red")
plot(data.f$t, data.f$f.t., type = "l")
summary(predict(m2))
8/10
88/100
44/50
22/25
1/10
2/20
3/30
head(data.f)
head(predict(m2))
func.data <- data.frame(x, predict(m2))
func.data
0.088
8/100
func.data <- data.frame(x, predict(m2))
summary(func.data)
func.data <- data.frame(x, predict(m2))
func.data
View(func.data)
View(data.f)
#look at this
f <- function(t){
func = ifelse(temp(t) <= 5, 0.36003054, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
}
data.f <- data.frame(t, temp(t), f(t))
plot(data.f$t, data.f$f.t., type = "l")
summary(data.f)
#look at this
f <- function(t){
func = ifelse(temp(t) < 5, 0.36003054, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
}
data.f <- data.frame(t, temp(t), f(t))
plot(data.f$t, data.f$f.t., type = "l")
summary(data.f)
func = ifelse(temp(t) <= 5, 0.36003054, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
#look at this
f <- function(t){
func = ifelse(temp(t) <= 5, 0.36003054, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
}
#look at this
f <- function(t){
func = ifelse(temp(t) <= 5, 0.36003054, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
}
data.f <- data.frame(t, temp(t), f(t))
plot(data.f$t, data.f$f.t., type = "l")
summary(data.f)
func.data
#look at this
f <- function(t){
func = ifelse(temp(t) <= 5, 0.36003054, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(func)
}
data.f <- data.frame(t, temp(t), f(t))
plot(data.f$t, data.f$f.t., type = "l")
data.f
View(data.f)
# p <- function(x){
#   ind <- which(temp(t)<rep(5))
#   x[ind] <- c_A*exp(((4-T_A)/d_A)^4)
# }
# This function defines adult mortality as a function of temperature
f <- function(t){
ifelse(temp(t) <= 5, 0.36003054, c_A*exp(((temp(t)-T_A)/d_A)^4))
}
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
#plot of adult mortality as a function of temperature as a function of time
ggplot(df8, aes(x=t, y=adult.mortality(t)))+
geom_line()
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
head(out)
plot(out)
plot(out$time, out$X1)
plot(out$time, out$X1, type = "l")
plot(out$time, out$X2, type = "l")
plot(out$time, out$X3, type = "l")
plot(out$time, out$X4, type = "l")
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
plot(out$time, out$X1)
plot(out$time, out$X1\2)
plot(out$time, out$X2)
plot(out$time, out$X4)
plot(out$time, out$X3)
plot(out$time, out$X4)
plot(out$time, out$X1)
View(out)
summary(out)
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
lines(out$X2)
lines(out$X2, "red")
lines(out$X2, "red")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
# Other model parameters [Values obtained from Hamdan and Kilicman, 2020]
mu_E <- 0#0.00157 #0.157
mu_L <- 0#0.00157
mu_P <- 0#0.00157
mu_A <- 0.0001
tau <- 0.7 # fraction of mosquitoes that emerge as adult females.
alpha_b <- 300 # Maximum number of eggs laid per oviposition [value taken from Abdelrazec & Gumel]
# Ignore density-dependent mortality for now.
k=10^6
parameters <- c(mu_E, mu_L, mu_P, mu_A, tau, alpha_b)
# Function for the system of equations
model <- function(t, y, ...){
# The number of eggs
E = y[1]
# The number of Larvae
L = y[2]
# The number of Pupa
P = y[3]
# The number of Matured (Adult) mosquitoes
A = y[4]
# The system of equations
dE <- alpha_b*gen(t)*A*(1-A/k) - (egg.dev(t) + egg.mortality(t) + mu_E)*E
dL <- egg.dev(t)*E - (larva.dev(t) + larva.mortality(t) + mu_L)*L
dP <- larva.dev(t)*L - (pupa.dev(t) + pupa.mortality(t) + mu_P)*P
dA <- tau*pupa.dev(t)*P - (adult.mortality(t) + mu_A)*A
return(list(c(dE, dL, dP, dA)))
}
#Initial conditions
y0 <- c(100, 0, 0, 10)
# Numerical integration.
out <-  ode(y = y0, func = model, times = t, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
# The system of equations
dE <- alpha_b*gen(t)*A - (egg.dev(t) + egg.mortality(t) + mu_E)*E
# The system of equations
dE <- alpha_b*gen(t)*A - (egg.dev(t) + egg.mortality(t) + mu_E)*E
# The number of Matured (Adult) mosquitoes
A = y[4]
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
# Function for the system of equations
model <- function(t, y, ...){
# The number of eggs
E = y[1]
# The number of Larvae
L = y[2]
# The number of Pupa
P = y[3]
# The number of Matured (Adult) mosquitoes
A = y[4]
# The system of equations
dE <- alpha_b*gen(t)*A*(1-A/k) - (egg.dev(t) + egg.mortality(t) + mu_E)*E
dL <- egg.dev(t)*E - (larva.dev(t) + larva.mortality(t) + mu_L)*L
dP <- larva.dev(t)*L - (pupa.dev(t) + pupa.mortality(t) + mu_P)*P
dA <- tau*pupa.dev(t)*P - (adult.mortality(t) + mu_A)*A
return(list(c(dE, dL, dP, dA)))
}
#Initial conditions
y0 <- c(100, 0, 0, 10)
# Numerical integration.
out <-  ode(y = y0, func = model, times = t, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
plot(out$time, out$X1, type = "l", ylim = c(0, 100))
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
plot(out$time, out$X1, type = "l")
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
