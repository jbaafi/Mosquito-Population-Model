nLL <- function(lambda) -sum(stats::dpois(y, lambda, log = TRUE))
fit0 <- mle(nLL, start = list(lambda = 5), nobs = NROW(y))
# For 1D, this is preferable:
fit1 <- mle(nLL, start = list(lambda = 5), nobs = NROW(y),
method = "Brent", lower = 1, upper = 20)
stopifnot(nobs(fit0) == length(y))
fit0
fit1
?seed
?set.seed
N=100
> x <- rnorm(N, mean = 3, sd = 2)
N <- 100
x <- rnorm(N, mean = 3, sd = 2)
plot(x)
plot(log(x))
mean()
mean(x)
sd(x)
?runif
M <- matrix(c(1:9), nrow=3, ncol=3)
M
matrix(1:9, nrow = 3, ncol = 3)
matrix(1:9, 3, 3)
y <- c(2, 3, 5, 7)
y
class(y)
length(y)
> x <- runif(N)
x <- runif(N)
y <- 5 * x + 3 + rnorm(N)
x
N
N
?N
x
y <- 5 * x + 3 + rnorm(N)
y
plot(x)
hist(x)
hist(y)
# experiment
a <- runif(50, min = 0, max = 10)
b <- runif(50, min = 10, max = 20)
dunif(a, min = 0, max = 10, log = FALSE)
dunif(a, min = 0, max = 5, log = FALSE)
u <- nidunif(a, min = 0, max = 5, log = FALSE)
u <- dunif(a, min = 0, max = 5, log = FALSE)
plot(u)
hist(u)
y <- 5 * x + 3 + rnorm(N)
y
length(y)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
# Fitting a Linear Model
x <- runif(N)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
fit <- lm(y~x)
summary(fit)
# We can superimpose the fitted line onto a scatter plot.
plot(x, y)
abline(fit, col = "red")
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
?lm
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
N <- 100
x <- runif(N)
# We can immediately fit this model using least squares regression.
fit <- lm(y ~ 5 * x + 3 + rnorm(N))
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
10/100
0.1*724.61
701.29+163.81
865.1*0.1
source('~/Desktop/R codes/swirl_project.R', echo=TRUE)
swirl()
0
x <- seq(1, 10)
y <- seq(20, 30)
data <- data.frame(x, y)
data <- data.frame(x, y)
length(x)
length(y)
x <- cx, 11
x <- c(x, 11)
length(x)
data <- data.frame(x, y)
data
plot.default(x, y)
tail(data)
tail(data, 1)
data
cbind(1, 2, 3, 4)
plot(cbind())
x <- cbind(1, 2, 3)
plot(x)
x <- 5
1/x
1/x^2
1/1
1/2
1/3
mm <- (a*x)/(b+x)
return(mm)
# Try hands on graphing functions
micmen <- function(x, a=2, b=1){
mm <- (a*x)/(b+x)
return(mm)
}
micmen(seq(0, 8 by=0.1))
micmen(seq(0, 8 by=0.1)
micmen(seq(0, 8, by=0.1)
micmen(seq(0, 8, by=0.1))
micmen(seq(0, 8, by=0.1))
xvec <- seq(0, 8, by = 0.1)
plot(xvec, micmen(xvec))
curve(micmen(xvec))
curve(micmen(x), from = 0, to = 10, ylim = c(0, 10))
curve(micmen(x), from = 0, to = 10, ylim = c(0, 2))
plot(xvec, micmen(xvec))
plot(xvec, micmen(xvec), type = "l")
curve(micmen(x), from = 0, to = 10, ylim = c(0, 2))
plot(xvec, micmen(xvec), type = "l")
curve(micmen(x), from = 0, to = 10, ylim = c(0, 2))
plot(xvec, micmen(xvec), type = "l", ylim = c(0, 2))
plot(xvec, micmen(xvec), type = "l", ylim = c(0, 2))
curve(micmen(x), from = 0, to = 10, ylim = c(0, 2))
plot(xvec, micmen(xvec), type = "l", ylim = c(0, 2))
lines(xvec, micmen(xvec), col = "red")
lines(xvec, micmen(xvec, b=2), col = "red")
lines(xvec, micmen(xvec, b=0), col = "blue")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
plot(xvec, micmen(xvec), type = "l", ylim = c(0, 2))
lines(xvec, micmen(xvec, b=2), col = "red")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
lines(xvec, micmen(xvec, a=1, b=2), col = "red")
lines(xvec, micmen(xvec, a=1, b=2), col = "green")
plot(xvec, micmen(xvec), type = "l")
lines(xvec, micmen(xvec, b=2), col = "red")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
plot(xvec, micmen(xvec), type = "l")
lines(xvec, micmen(xvec, b=2), col = "red")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
lines(xvec, micmen(xvec, a=10, b=2), col = "green")
plot(xvec, micmen(xvec), type = "l")
# Try hands on graphing functions
micmen <- function(x, a=10, b=1){
mm <- (a*x)/(b+x)
return(mm)
}
xvec <- seq(0, 8, by = 0.1)
plot(xvec, micmen(xvec), type = "l")
lines(xvec, micmen(xvec, b=2), col = "red")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
lines(xvec, micmen(xvec, a=10, b=2), col = "green")
lines(xvec, micmen(xvec, a=10, b=2), col = "green")
plot(xvec, micmen(xvec), type = "l", ylim = c(0, 12))
lines(xvec, micmen(xvec, b=2), col = "red")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
lines(xvec, micmen(xvec, a=10, b=2), col = "green")
plot(xvec, micmen(xvec), type = "l", ylim = c(0, 10))
lines(xvec, micmen(xvec, b=2), col = "red")
lines(xvec, micmen(xvec, b=0.5), col = "blue")
lines(xvec, micmen(xvec, a=10, b=2), col = "green")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
0
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, repl)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = C(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
fflips
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
stop()
plot(rnorm)
plot(rnorm(10))
plot(rnorm(10), type = "l")
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
cm
hist(cm)
swirl()
swirl()
gf_point
D(expression(2x^3), x)
D(expression(2x^3), "x")
D(expression(2*x^3), "x")
D(expression(2*x^2), "x")
D(expression(2*x), "x")
?rnorm
log(0)
ln(0)
?log
log(0, base = 10)
x <- 1:10
y=2*log10(x)
plot(x, y)
plot(x, y, type = "l")
plot(x, y, type = "l", ylim = c(0, 5))
plot(x, y, type = "l", ylim = c(0, 3))
plot(x, y, type = "l", ylim = c(0, 2))
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
x <- seq(1, 9)
data <- data.frame(x, y)
head(data)
plot(data$x, data$y, type = "l")
plot(data$x, data$y)
log10(5.437/3.297)
3.297/exp(0.217)
################################################
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
plot(data$x, data$y)
xx <- seq(0, 10)
yy <- 2.7*exp(0.2*xx)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.7*exp(0.4*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.7*exp(0.6*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.7*exp(0.45*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.5*exp(0.4*6xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.5*exp(0.4*6xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.5*exp(0.46*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.5*exp(0.48*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.5*exp(0.47*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.45*exp(0.47*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.45*exp(0.475*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
getwd()
5.25-1.75
5.5-0.75
5.25-1.75
5.5-2.75
5.5-1.25
5.5-2.75
getwd()
library(swirl)
rm(list = ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
plants$Active_Growth_Period
table(plants$Active_Growth_Period)
str(plants)
0
0
Sys.Date()
mean(c(2, 4, 5))
bye
bye()
swirl()
x <- larv.df.total$temp
update.packages(ask = FALSE)
2.74e4
2.7e-3
TRUE+TRUE
FALSE+FALSE
my_object <- null
NULL
my_object <- NULL
my_object <- NULL
my_object
class(my_object)
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
library(dplyr)
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
install.packages("scales")
library(dplyr)
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
install.packages("statmod")
library(dplyr)
#Clear workspace
rm(list = ls())
#set working directory
setwd("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population")
# Import packages into r
library(tidyverse)
library(dplyr)
install.packages("statmod")
install.packages("scales")
library(scales)
library(scales)
library(dplyr)
install.packages("rlang")
install.packages("rlang")
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
# Import packages into r
library(tidyverse)
library(scales)
library(dplyr)
library(chron)
library(ggplot2)
library(deSolve)
#Import 2011-2016 climate data into r
climate_11 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2011_P1D.csv", header = TRUE)
climate_12 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2012_P1D.csv", header = TRUE)
source('~/Desktop/Mosquito population dynamics/mosquito_population/mosquito_model.R', echo=TRUE)
#Clear workspace
rm(list = ls())
#Clear workspace
rm(list = ls())
#set working directory
setwd("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population")
# Import packages into r
library(tidyverse)
library(scales)
library(dplyr)
library(chron)
library(ggplot2)
library(deSolve)
#Import 2011-2016 climate data into r
climate_11 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2011_P1D.csv", header = TRUE)
climate_12 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2012_P1D.csv", header = TRUE)
climate_13 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2013_P1D.csv", header = TRUE)
climate_14 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2014_P1D.csv", header = TRUE)
climate_15 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2015_P1D.csv", header = TRUE)
climate_16 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2016_P1D.csv", header = TRUE)
# To subset the data for the needed columns
climate_df_11 <- climate_11 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_12 <- climate_12 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_13 <- climate_13 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_14 <- climate_14 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_15 <- climate_15 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_16 <- climate_16 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
# Combine the above data-frames into one data-frame.
climate_df <- rbind(climate_df_11, climate_df_12, climate_df_13, climate_df_14,
climate_df_15, climate_df_16)
# Rename some of the columns of the climate_df to make it simple
climate.df <- climate_df %>%
rename(Mean.Temp = Mean.Temp...C.,
Total.Precip = Total.Precip..mm.
)
# Formatting time data in a form that chron can understand
daily_dates <- dates(paste(climate.df$Month,
climate.df$Day,
climate.df$Year, sep="/"))
climate.df$Chron.Date <-chron(dates=daily_dates,
origin. = c(month = 1,day = 1,
year = 2011)) # setting date into chron
climate.df <- arrange(climate.df, Chron.Date) # ordering dates and adding it to data-frame
start.date <- as.Date("2011-01-01") # The starting date
climate.df$Days.Since.Origin <- (as.numeric(as.Date(climate.df$Chron.Date) - start.date)) # Producing a sequence from smallest to largest
# counting NANs column-wise
sapply(climate.df, function(x) sum(is.na(x)))
# Formating data to exclude the NANs
climate.df<- filter(climate.df, !is.na(Mean.Temp), !is.na(Total.Precip))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "steelblue")+
theme_classic()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
write.csv(climate.df, file = "climate.df.csv")
# Time series plot of total precipitation
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Total.Precip))+
geom_line(colour = "steelblue")+
theme_light()+
xlab("Time (Days)")+
ylab("Total Precipitation") +
theme(axis.text.x=element_text(angle=45, hjust=1))
# Fitting function to data of mean temperature
Time <- climate.df$Days.Since.Origin
Temp <- climate.df$Mean.Temp
#Define a periodic function to fit to data
Temp.func <- sin(2*pi*Time/365) + cos(2*pi*Time/365)
fit.lm <- lm(Temp~Temp.func)
fit <- fitted(fit.lm)
# find predictions for original time series
pred <- predict(fit.lm, newdata=data.frame(Time=Time))
#Plotting the data with fitted function with the base plot function
plot(Temp ~ Days.Since.Origin, data= climate.df)
lines(fit, col="red")
lines(Time, pred, col="blue")
summary(fit.lm)
#Plotting with same data as above with ggplot2
ggplot(data = climate.df)+
geom_point(mapping = aes(x=Days.Since.Origin, y=Mean.Temp))+
geom_line(mapping = aes(x=Days.Since.Origin, y=fit, colour="red"))+
geom_line(mapping = aes(x=Time, y=pred, colour="blue"))
