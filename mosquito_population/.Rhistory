df7 <- data.frame(t, pupa.mortality(t))
#plot of pupa mortality as a function of temperature as a function of time
ggplot(df7, aes(x=t, y=pupa.mortality(t)))+
geom_line()
# Fit scalars in adult mortality function
c_A <- 0.08841
T_A <- 21.24746
d_A <- 14.92552
# p <- function(x){
#   ind <- which(temp(t)<rep(5))
#   x[ind] <- c_A*exp(((4-T_A)/d_A)^4)
# }
# This function defines adult mortality as a function of temperature
adult.mortality <- function(t){
ad.mort = ifelse(temp(t) <= 5, 0.2500, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(ad.mort)
}
#c_A*exp(((20-T_A)/d_A)^4)
df8 <- data.frame(t, adult.mortality(t))
plot(temp(t), adult.mortality(t), "l")
#plot of adult mortality as a function of temperature as a function of time
ggplot(df8, aes(x=t, y=adult.mortality(t)))+
geom_line()
# Other model parameters [Values obtained from Hamdan and Kilicman, 2020]
mu_E <- 0#0.00157 #0.157
mu_L <- 0#0.00157
mu_P <- 0#0.00157
mu_A <- 0.0001
tau <- 0.7 # fraction of mosquitoes that emerge as adult females.
alpha_b <- 300 # Maximum number of eggs laid per oviposition [value taken from Abdelrazec & Gumel]
# Ignore density-dependent mortality for now.
k=10^6
parameters <- c(mu_E, mu_L, mu_P, mu_A, tau, alpha_b)
# Function for the system of equations
model <- function(t, y, ...){
# The number of eggs
E = y[1]
# The number of Larvae
L = y[2]
# The number of Puparb
P = y[3]
# The number of Matured (Adult) mosquitoes
A = y[4]
# The system of equations
dE <- alpha_b*gen(t)*A*(1-A/k) - (egg.dev(t) + egg.mortality(t) + mu_E)*E
dL <- egg.dev(t)*E - (larva.dev(t) + larva.mortality(t) + mu_L)*L
dP <- larva.dev(t)*L - (pupa.dev(t) + pupa.mortality(t) + mu_P)*P
dA <- tau*pupa.dev(t)*P - (adult.mortality(t) + mu_A)*A
return(list(c(dE, dL, dP, dA)))
}
#Initial conditions
y0 <- c(100, 0, 0, 10)
#time steps
#times <- seq(0, 100, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = model, times = t, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage Population",
main = "Population Dynamics of Aquatic and Adult")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
plot(out$time, out$X4, type = "l")
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
#par(mfrow=c(2,1))
#plot(out$time, out$X1, type = "l", col = "blue")
#plot(df$t, df$temp.t., type = "l", col = "red")
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage Population",
main = "Population Dynamics of Aquatic and Adult")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
#Model parameters
a <-  mean(climate.df$Mean.Temp) #  8.9231
b1 <- -8.7635
b2 <- b1
t_end <- 365*6
#t <- Time
#dtime = 0.5 # time steps
t <-  seq(0, t_end, #dtime
)
t0 <-t[1]
# Defining temperature function
temp <- function(t){
temp = a + b1*sin(2 * pi * t/365) + b2*cos(2 * pi * t/365)
return(temp)
}
df <- data.frame(t, temp(t))
#Plot of temperature as a function of time (365 days)
ggplot(data = df, mapping = aes(x=t, y=temp(t)))+
geom_line()
################################################################################
# Define a periodic rainfall function here
# Multiply each parameter function by a function of rainfall and run the model
################################################################################
# Fit scalar in gentrophic cycle rate function
alpha <- 168.0257252
beta <- 34.0632871
gamma <- 0.4371833
# This function defines the relationship between temperature and genotrophic cycle
gen <- function(t){
#gen <-  gamma*exp(-(temp(t)-beta)^2/alpha)
gen = ifelse(temp(t) <= 10, 0.014, gamma*exp(-(temp(t)-beta)^2/alpha))
return(gen)
}
df1 <- data.frame(t, gen(t))
plot(temp(t), gen(t), "l")
#plot of genotrophic cycle as a function of temperature as a function of time
ggplot(df1, aes(x=t, y=gen(t)))+
geom_line()
# Fit scalars in egg development rate function
alpha_e <- 1337.666814
beta_e <- 75.098187
gamma_e <- 4.049403
# This function defines the relationship between temperature and genotrophic cycle
egg.dev <- function(t){
#egg <-  gamma_e*exp(-(temp(t)-beta_e)^2/alpha_e)
egg = ifelse(temp(t) <= 5, 0.0000, gamma_e*exp(-(temp(t)-beta_e)^2/alpha_e))
return(egg)
}
df2 <- data.frame(t, egg.dev(t))
plot(temp(t), egg.dev(t), "l")
plot(t, egg.dev(t), "l")
min(egg.dev(t))
#plot of egg development as a function of temperature as a function of time
ggplot(df2, aes(x=t, y=egg.dev(t)))+
geom_line()
# Fit scalars in larvae development rate function
alpha_l <- 109.03255
beta_l <- 27.18118
gamma_l <- 0.16231
# This function defines the relationship between temperature and genotrophic cycle
larva.dev <- function(t){
larva <-  gamma_l*exp(-(temp(t)-beta_l)^2/alpha_l)
return(larva)
}
df3 <- data.frame(t, larva.dev(t))
plot(temp(t), larva.dev(t), "l")
#plot of larva development as a function of temperature as a function of time
ggplot(df3, aes(x=t, y=larva.dev(t)))+
geom_line()
# Fit scalars in pupal development rate function
alpha_p <- 339.6702830
beta_p <- 39.9070020
gamma_p <-  0.5920232
# This function defines pupa development as a function of temperature
pupa.dev <- function(t){
pupa <-  gamma_p*exp(-(temp(t)-beta_p)^2/alpha_p)
return(pupa)
}
df4 <- data.frame(t, pupa.dev(t))
plot(temp(t), pupa.dev(t), "l")
#plot of pupa development as a function of temperature as a function of time
ggplot(df4, aes(x=t, y=pupa.dev(t)))+
geom_line()
# Fit scalars in egg mortality function
c_E <- 1.118e-03
T_E <- 2.218e+01
d_E <- 1.488e-02
# This function defines egg mortality as a function of temperature
egg.mortality <- function(t){
#egg.mortality <-  c_E*(temp(t) - T_E)^2 + d_E
egg.mortality = ifelse(temp(t) <= 10, 0.25, c_E*(temp(t) - T_E)^2 + d_E)
return(egg.mortality)
}
df5 <- data.frame(t, egg.mortality(t))
plot(temp(t), egg.mortality(t), "l")
#plot of egg mortality as a function of temperature as a function of time
ggplot(df5, aes(x=t, y=egg.mortality(t)))+
geom_line()
# Fit scalars in larvae mortality function
c_L <- 0.0025 #(Abdelrazek) #1.118e-03
T_L <- 20 #(Abdelrazak) #2.218e+01
d_L <- 0.2 #1.488e-02
# This function defines larva mortality as a function of temperature
larva.mortality <- function(t){
#larva.mortality <-  c_L*(temp(t) - T_L)^2 + d_L
larva.mortality = ifelse(temp(t) <= 5, 0.25, c_L*(temp(t) - T_L)^2 + d_L)
return(larva.mortality)
}
df6 <- data.frame(t, larva.mortality(t))
plot(temp(t), larva.mortality(t), "l")
#plot of larva mortality as a function of temperature as a function of time
ggplot(df6, aes(x=t, y=larva.mortality(t)))+
geom_line()
# Fit scalars in pupa mortality function
c_P <- 0.001 #(Abdelrazek) #1.118e-03
T_P <- 20 #(Abdelrazak) #2.218e+01
d_P <- 0.15 #1.488e-02
# This function defines pupa mortality as a function of temperature
pupa.mortality <- function(t){
pupa.mortality <-  c_P*(temp(t) - T_P)^2 + d_P
return(pupa.mortality)
}
df7 <- data.frame(t, pupa.mortality(t))
#plot of pupa mortality as a function of temperature as a function of time
ggplot(df7, aes(x=t, y=pupa.mortality(t)))+
geom_line()
# Fit scalars in adult mortality function
c_A <- 0.08841
T_A <- 21.24746
d_A <- 14.92552
# p <- function(x){
#   ind <- which(temp(t)<rep(5))
#   x[ind] <- c_A*exp(((4-T_A)/d_A)^4)
# }
# This function defines adult mortality as a function of temperature
adult.mortality <- function(t){
ad.mort = ifelse(temp(t) <= 5, 0.2500, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(ad.mort)
}
#c_A*exp(((20-T_A)/d_A)^4)
df8 <- data.frame(t, adult.mortality(t))
plot(temp(t), adult.mortality(t), "l")
#plot of adult mortality as a function of temperature as a function of time
ggplot(df8, aes(x=t, y=adult.mortality(t)))+
geom_line()
# Other model parameters [Values obtained from Hamdan and Kilicman, 2020]
mu_E <- 0#0.00157 #0.157
mu_L <- 0#0.00157
mu_P <- 0#0.00157
mu_A <- 0.0001
tau <- 0.7 # fraction of mosquitoes that emerge as adult females.
alpha_b <- 300 # Maximum number of eggs laid per oviposition [value taken from Abdelrazec & Gumel]
# Ignore density-dependent mortality for now.
k=10^6
parameters <- c(mu_E, mu_L, mu_P, mu_A, tau, alpha_b)
# Function for the system of equations
model <- function(t, y, ...){
# The number of eggs
E = y[1]
# The number of Larvae
L = y[2]
# The number of Puparb
P = y[3]
# The number of Matured (Adult) mosquitoes
A = y[4]
# The system of equations
dE <- alpha_b*gen(t)*A*(1-A/k) - (egg.dev(t) + egg.mortality(t) + mu_E)*E
dL <- egg.dev(t)*E - (larva.dev(t) + larva.mortality(t) + mu_L)*L
dP <- larva.dev(t)*L - (pupa.dev(t) + pupa.mortality(t) + mu_P)*P
dA <- tau*pupa.dev(t)*P - (adult.mortality(t) + mu_A)*A
return(list(c(dE, dL, dP, dA)))
}
#Initial conditions
y0 <- c(100, 0, 0, 10)
#time steps
#times <- seq(0, 100, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = model, times = t, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage Population",
main = "Population Dynamics of Aquatic and Adult")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage Population",
main = "Population Dynamics of Aquatic and Adult over a period of 6yrs")
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage Population",
main = "Population Dynamics over a period of 6yrs")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
par(mfrow=c(2,1))
plot(out$time, out$X1, type = "l", col = "blue")
plot(df$t, df$temp.t., type = "l", col = "red")
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(df$t, df$temp.t., type = "l", col = "red")
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
par(mfrow=c(2,1))
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(df$t, df$temp.t., type = "l", col = "red", xlab = "Time (days)",
ylab = "Mean Daily Temperature (°C)")
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(df$t, df$temp.t., type = "l", col = "red", xlab = "Time (days)",
ylab = expression(paste("Temperature, ",degree,"C")))
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
par(mfrow=c(5,1))
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(df$t, df$temp.t., type = "l", col = "red", xlab = "Time (days)",
ylab = expression(paste("Temperature, ",degree,"C")))
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
par(mfrow=c(5,1))
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
par(mfrow=c(3,1))
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(out$time, out$X2, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(df$t, df$temp.t., type = "l", col = "red", xlab = "Time (days)",
ylab = expression(paste("Temperature, ",degree,"C")))
plot(out$time, out$X2, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Larvae Population")
plot(df$t, df$temp.t., type = "l", col = "red", xlab = "Time (days)",
ylab = expression(paste("Temperature, ",degree,"C")))
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
par(mfrow=c(3,1))
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(out$time, out$X2, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Larvae Population")
plot(df$t, df$temp.t., type = "l", col = "red", xlab = "Time (days)",
ylab = expression(paste("Temperature, ",degree,"C")))
# the idea is to plot abundance with temperature on same space to compare whether it makes sense
# edit this a little bit to see how it works out to be
par(mfrow=c(3,1))
plot(out$time, out$X1, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Egg Population")
plot(out$time, out$X4, type = "l", col = "blue", xlab = "Time (days)",
ylab = "Adult population")
plot(df$t, df$temp.t., type = "l", col = "red", xlab = "Time (days)",
ylab = expression(paste("Temperature, ",degree,"C")))
#Model parameters
a <-  mean(climate.df$Mean.Temp) #  8.9231
b1 <- -8.7635
b2 <- b1
t_end <- 365*6
#t <- Time
#dtime = 0.5 # time steps
t <-  seq(0, t_end, #dtime
)
t0 <-t[1]
# Defining temperature function
temp <- function(t){
temp = a + b1*sin(2 * pi * t/365) + b2*cos(2 * pi * t/365)
return(temp)
}
df <- data.frame(t, temp(t))
#Plot of temperature as a function of time (365 days)
ggplot(data = df, mapping = aes(x=t, y=temp(t)))+
geom_line()
################################################################################
# Define a periodic rainfall function here
# Multiply each parameter function by a function of rainfall and run the model
################################################################################
# Fit scalar in gentrophic cycle rate function
alpha <- 168.0257252
beta <- 34.0632871
gamma <- 0.4371833
# This function defines the relationship between temperature and genotrophic cycle
gen <- function(t){
#gen <-  gamma*exp(-(temp(t)-beta)^2/alpha)
gen = ifelse(temp(t) <= 10, 0.014, gamma*exp(-(temp(t)-beta)^2/alpha))
return(gen)
}
df1 <- data.frame(t, gen(t))
plot(temp(t), gen(t), "l")
#plot of genotrophic cycle as a function of temperature as a function of time
ggplot(df1, aes(x=t, y=gen(t)))+
geom_line()
# Fit scalars in egg development rate function
alpha_e <- 1337.666814
beta_e <- 75.098187
gamma_e <- 4.049403
# This function defines the relationship between temperature and genotrophic cycle
egg.dev <- function(t){
#egg <-  gamma_e*exp(-(temp(t)-beta_e)^2/alpha_e)
egg = ifelse(temp(t) <= 5, 0.0000, gamma_e*exp(-(temp(t)-beta_e)^2/alpha_e))
return(egg)
}
df2 <- data.frame(t, egg.dev(t))
plot(temp(t), egg.dev(t), "l")
plot(t, egg.dev(t), "l")
min(egg.dev(t))
#plot of egg development as a function of temperature as a function of time
ggplot(df2, aes(x=t, y=egg.dev(t)))+
geom_line()
# Fit scalars in larvae development rate function
alpha_l <- 109.03255
beta_l <- 27.18118
gamma_l <- 0.16231
# This function defines the relationship between temperature and genotrophic cycle
larva.dev <- function(t){
larva <-  gamma_l*exp(-(temp(t)-beta_l)^2/alpha_l)
return(larva)
}
df3 <- data.frame(t, larva.dev(t))
plot(temp(t), larva.dev(t), "l")
#plot of larva development as a function of temperature as a function of time
ggplot(df3, aes(x=t, y=larva.dev(t)))+
geom_line()
# Fit scalars in pupal development rate function
alpha_p <- 339.6702830
beta_p <- 39.9070020
gamma_p <-  0.5920232
# This function defines pupa development as a function of temperature
pupa.dev <- function(t){
pupa <-  gamma_p*exp(-(temp(t)-beta_p)^2/alpha_p)
return(pupa)
}
df4 <- data.frame(t, pupa.dev(t))
plot(temp(t), pupa.dev(t), "l")
#plot of pupa development as a function of temperature as a function of time
ggplot(df4, aes(x=t, y=pupa.dev(t)))+
geom_line()
# Fit scalars in egg mortality function
c_E <- 1.118e-03
T_E <- 2.218e+01
d_E <- 1.488e-02
# This function defines egg mortality as a function of temperature
egg.mortality <- function(t){
#egg.mortality <-  c_E*(temp(t) - T_E)^2 + d_E
egg.mortality = ifelse(temp(t) <= 10, 0.25, c_E*(temp(t) - T_E)^2 + d_E)
return(egg.mortality)
}
df5 <- data.frame(t, egg.mortality(t))
plot(temp(t), egg.mortality(t), "l")
#plot of egg mortality as a function of temperature as a function of time
ggplot(df5, aes(x=t, y=egg.mortality(t)))+
geom_line()
# Fit scalars in larvae mortality function
c_L <- 0.0025 #(Abdelrazek) #1.118e-03
T_L <- 20 #(Abdelrazak) #2.218e+01
d_L <- 0.2 #1.488e-02
# This function defines larva mortality as a function of temperature
larva.mortality <- function(t){
#larva.mortality <-  c_L*(temp(t) - T_L)^2 + d_L
larva.mortality = ifelse(temp(t) <= 5, 0.25, c_L*(temp(t) - T_L)^2 + d_L)
return(larva.mortality)
}
df6 <- data.frame(t, larva.mortality(t))
plot(temp(t), larva.mortality(t), "l")
#plot of larva mortality as a function of temperature as a function of time
ggplot(df6, aes(x=t, y=larva.mortality(t)))+
geom_line()
# Fit scalars in pupa mortality function
c_P <- 0.001 #(Abdelrazek) #1.118e-03
T_P <- 20 #(Abdelrazak) #2.218e+01
d_P <- 0.15 #1.488e-02
# This function defines pupa mortality as a function of temperature
pupa.mortality <- function(t){
pupa.mortality <-  c_P*(temp(t) - T_P)^2 + d_P
return(pupa.mortality)
}
df7 <- data.frame(t, pupa.mortality(t))
#plot of pupa mortality as a function of temperature as a function of time
ggplot(df7, aes(x=t, y=pupa.mortality(t)))+
geom_line()
# Fit scalars in adult mortality function
c_A <- 0.08841
T_A <- 21.24746
d_A <- 14.92552
# p <- function(x){
#   ind <- which(temp(t)<rep(5))
#   x[ind] <- c_A*exp(((4-T_A)/d_A)^4)
# }
# This function defines adult mortality as a function of temperature
adult.mortality <- function(t){
ad.mort = ifelse(temp(t) <= 5, 0.2500, c_A*exp(((temp(t)-T_A)/d_A)^4))
return(ad.mort)
}
#c_A*exp(((20-T_A)/d_A)^4)
df8 <- data.frame(t, adult.mortality(t))
plot(temp(t), adult.mortality(t), "l")
#plot of adult mortality as a function of temperature as a function of time
ggplot(df8, aes(x=t, y=adult.mortality(t)))+
geom_line()
# Other model parameters [Values obtained from Hamdan and Kilicman, 2020]
mu_E <- 0#0.00157 #0.157
mu_L <- 0#0.00157
mu_P <- 0#0.00157
mu_A <- 0.0001
tau <- 0.7 # fraction of mosquitoes that emerge as adult females.
alpha_b <- 300 # Maximum number of eggs laid per oviposition [value taken from Abdelrazec & Gumel]
# Ignore density-dependent mortality for now.
k=10^6
parameters <- c(mu_E, mu_L, mu_P, mu_A, tau, alpha_b)
# Function for the system of equations
model <- function(t, y, ...){
# The number of eggs
E = y[1]
# The number of Larvae
L = y[2]
# The number of Puparb
P = y[3]
# The number of Matured (Adult) mosquitoes
A = y[4]
# The system of equations
dE <- alpha_b*gen(t)*A*(1-A/k) - (egg.dev(t) + egg.mortality(t) + mu_E)*E
dL <- egg.dev(t)*E - (larva.dev(t) + larva.mortality(t) + mu_L)*L
dP <- larva.dev(t)*L - (pupa.dev(t) + pupa.mortality(t) + mu_P)*P
dA <- tau*pupa.dev(t)*P - (adult.mortality(t) + mu_A)*A
return(list(c(dE, dL, dP, dA)))
}
#Initial conditions
y0 <- c(100, 0, 0, 10)
#time steps
#times <- seq(0, 100, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = model, times = t, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage Population",
main = "Population Dynamics over a period of 6yrs")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "yellow")
